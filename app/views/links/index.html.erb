
   <!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">


    <script src="https://threejs.org/build/three.min.js"></script>
    <script src="https://threejs.org/examples/js/libs/tween.min.js"></script>
    <script src="https://threejs.org/examples/js/controls/TrackballControls.js"></script>
    <script src="https://threejs.org/examples/js/renderers/CSS3DRenderer.js"></script>

<script src = "https://cdnjs.cloudflare.com/ajax/libs/three.js/88/three.js"></script>


<script src="https://threejs.org/examples/js/AsciiEffect.js"></script>
    
<script src="https://threejs.org/examples/js/renderers/Projector.js"></script>





<p id="notice"><%= notice %></p>

<h1>Links</h1>

<table>
  <thead>
    <tr>
      <th>Title</th>
      <th>Url</th>
      <th colspan="3"></th>
    </tr>
  </thead>

  <tbody>
    <% @links.each do |link| %>
      <tr>
        <td><%= link.title %></td>
        <td><%= link.url %></td>
        <td><%= link_to 'Show', link %></td>
        <% if link.user == current_user %>
        <td><%= link_to 'Edit', edit_link_path(link) %></td>
        <td><%= link_to 'Destroy', link, method: :delete, data: { confirm: 'Are you sure?' } %></td>
        <% end %>
      </tr>
    <% end %>
  </tbody>
</table>

<br>

<%= link_to 'New Link', new_link_path %>








    <style>
      html, body {
        height: 100%;
      }

      body {
        background-color: #000000;
        margin: 0;
        font-family: Arial;
        overflow: hidden;
      }

      a {
        color: #ffffff;
      }

      #info {
        position: absolute;
        width: 100%;
        color: #ffffff;
        padding: 5px;
        font-family: Monospace;
        font-size: 13px;
        font-weight: bold;
        text-align: center;
        z-index: 1;
      }

      #menu {
        position: absolute;
        bottom: 20px;
        width: 100%;
        text-align: center;
      }

      .element {
        width: 140px;
        height: 180px;
        box-shadow: 0px 0px 20px rgba(0,255,255,0.5);
        border: 1px solid rgba(127,255,255,0.25);
        cursor: default;
      }

      .element:hover {
        box-shadow: 0px 0px 20px rgba(0,255,255,0.75);
        border: 1px solid rgba(127,255,255,0.75);
      }

        .element .number {
          position: absolute;
          top: 20px;
          right: 20px;
          font-size: 20px;
          color: rgba(127,255,255,0.75);
        }

        .element .symbol {
          position: absolute;
          top: 40px;
          width: 100%;
          font-size: 70px;
          text-align: center;
          color: rgba(255,255,255,0.75);
          font-weight: bold;

          -webkit-filter: drop-shadow(0px 0px 20px rgba(0,255,255,0.95));
          -moz-filter: drop-shadow(0px 0px 20px rgba(0,255,255,0.95));
          -o-filter: drop-shadow(0px 0px 20px rgba(0,255,255,0.95));
          -ms-filter: drop-shadow(0px 0px 20px rgba(0,255,255,0.95));
          filter: drop-shadow(0px 0px 20px rgba(0,255,255,0.95));
        }

        .element .details {
          position: absolute;
          top: 125px;
          width: 100%;
          font-size: 18px;
          text-align: center;
          color: rgba(127,255,255,0.75);
        }

      button {
        color: rgba(127,255,255,0.75);
        background: transparent;
        outline: 1px solid rgba(127,255,255,0.75);
        border: 0px;
        padding: 5px 10px;
        cursor: pointer;
      }
      button:hover {
        background-color: rgba(0,255,255,0.5);
      }
      button:active {
        color: #000000;
        background-color: rgba(0,255,255,0.75);
      }
    </style>
  </head>
  <body>
    <script src="https://threejs.org/build/three.min.js"></script>
    <script src="https://threejs.org/examples/js/libs/tween.min.js"></script>
    <script src="https://threejs.org/examples/js/controls/TrackballControls.js"></script>
    <script src="https://threejs.org/examples/js/renderers/CSS3DRenderer.js"></script>

    <div id="container"></div>


    <div id="menu">
      <button id="table">TABLE</button>
      <button id="sphere">SPHERE</button>
      <button id="helix">HELIX</button>
      <button id="grid">GRID</button>

    <script>

    var table = [
        [ "N", "Nitrogen", "14.0067", 15, 2 ],

        [ "V", "Voiture", "1.00794", 1, 1 ],
        [ "M", "Moto", "4.002602", 18, 1 ],
        [ "E", "Equipement Moto", "6.941", 1, 2 ],
        [ "E", "Equipement Auto", "9.012182", 2, 2 ],
        [ "T", "Téléphoni", "10.811", 13, 2 ],
        [ "A", "Ameublement", "12.0107", 14, 2 ],
        [ "E", "Electroménager", "14.0067", 15, 2 ],
        [ "D", "Décoration", "15.9994", 16, 2 ],
        [ "B", "Bricolage", "18.9984032", 17, 2 ],
        [ "J", "Jardinage", "20.1797", 18, 2 ],
        [ "V", "Vetement", "22.98976...", 1, 3 ],
        [ "C", "Chausures", "24.305", 2, 3 ],
        [ "M", "Montres & Bijoux", "26.9815386", 13, 3 ],
        [ "L", "Livres", "28.0855", 14, 3 ],
        [ "A", "Animaux", "30.973762", 15, 3 ],
        [ "V", "Vélo", "32.065", 16, 3 ],
        [ "S", "Sport & Hobbies", "35.453", 17, 3 ],
        [ "C", "Collection", "39.948", 18, 3 ],
        [  "J", "Jeux & Jouets", "39.948", 1, 4 ],
        [ "B", "Billetterie", "40.078", 2, 4 ],
        [ "E", "Evenement", "44.955912", 3, 4 ],
        [ "C", "Covoiturage", "47.867", 4, 4 ],
        [ "C", "Cours particulier", "50.9415", 5, 4 ],
        [ "M", "Matériel Médical", "51.9961", 6, 4 ],
        [ "F", "Fourniture de Bureau", "54.938045", 7, 4 ],
        [ "O", "Outillage", "55.845", 8, 4 ],
        [ "T", "transport", "58.933195", 9, 4 ],
      ];


      var camera, scene, renderer;
      var controls;

      var objects = [];
      var targets = { table: [], sphere: [], helix: [], grid: [] };

      init();
      animate();

      function init() {

        camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 5000 );
        camera.position.z = 1800;

        scene = new THREE.Scene();

        for ( var i = 0; i < table.length; i ++ ) {

          var item = table[ i ];

          var element = document.createElement( 'div' );
          element.className = 'element';
          element.style.backgroundColor = 'rgba(0,127,127,' + ( Math.random() * 0.5 + 0.25 ) + ')';

          var number = document.createElement( 'div' );
          number.className = 'number';
          number.textContent = i + 1;
          element.appendChild( number );

          var symbol = document.createElement( 'div' );
          symbol.className = 'symbol';
          symbol.textContent = item[ 0 ];
          element.appendChild( symbol );

          var details = document.createElement( 'div' );
          details.className = 'details';
          details.innerHTML = item[ 1 ] + '<br>' + item[ 2 ];
          element.appendChild( details );

          var object = new THREE.CSS3DObject( element );
          object.position.x = Math.random() * 4000 - 2000;
          object.position.y = Math.random() * 4000 - 2000;
          object.position.z = Math.random() * 4000 - 2000;
          scene.add( object );

          objects.push( object );

        }

        // table

        for ( var i = 0; i < objects.length; i ++ ) {

          var item = table[ i ];

          var object = new THREE.Object3D();
          object.position.x = ( item[ 3 ] * 160 ) - 1540;
          object.position.y = - ( item[ 4 ] * 200 ) + 1100;

          targets.table.push( object );

        }

        // sphere

        var vector = new THREE.Vector3();

        for ( var i = 0, l = objects.length; i < l; i ++ ) {

          var phi = Math.acos( -1 + ( 2 * i ) / l );
          var theta = Math.sqrt( l * Math.PI ) * phi;

          var object = new THREE.Object3D();

          object.position.x = 1000 * Math.cos( theta ) * Math.sin( phi );
          object.position.y = 1000 * Math.sin( theta ) * Math.sin( phi );
          object.position.z = 1000 * Math.cos( phi );

          vector.copy( object.position ).multiplyScalar( 2 );

          object.lookAt( vector );

          targets.sphere.push( object );

        }

        // helix

        var vector = new THREE.Vector3();

        for ( var i = 0, l = objects.length; i < l; i ++ ) {

          var phi = i * 0.175 + Math.PI;

          var object = new THREE.Object3D();

          object.position.x = 1100 * Math.sin( phi );
          object.position.y = - ( i * 8 ) + 450;
          object.position.z = 1100 * Math.cos( phi );

          vector.copy( object.position );
          vector.x *= 2;
          vector.z *= 2;

          object.lookAt( vector );

          targets.helix.push( object );

        }

        // grid

        for ( var i = 0; i < objects.length; i ++ ) {

          var object = new THREE.Object3D();

          object.position.x = ( ( i % 5 ) * 400 ) - 800;
          object.position.y = ( - ( Math.floor( i / 5 ) % 5 ) * 400 ) + 800;
          object.position.z = ( Math.floor( i / 25 ) ) * 1000 - 2000;

          targets.grid.push( object );

        }

        //

        renderer = new THREE.CSS3DRenderer();
        renderer.setSize( window.innerWidth, window.innerHeight );
        renderer.domElement.style.position = 'absolute';
        document.getElementById( 'container' ).appendChild( renderer.domElement );

        //

        controls = new THREE.TrackballControls( camera, renderer.domElement );
        controls.rotateSpeed = 0.5;
        controls.addEventListener( 'change', render );

        var button = document.getElementById( 'table' );
        button.addEventListener( 'click', function ( event ) {

          transform( targets.table, 2000 );

        }, false );

        var button = document.getElementById( 'sphere' );
        button.addEventListener( 'click', function ( event ) {

          transform( targets.sphere, 2000 );

        }, false );

        var button = document.getElementById( 'helix' );
        button.addEventListener( 'click', function ( event ) {

          transform( targets.helix, 2000 );

        }, false );

        var button = document.getElementById( 'grid' );
        button.addEventListener( 'click', function ( event ) {

          transform( targets.grid, 2000 );

        }, false );

        transform( targets.table, 5000 );

        //

        window.addEventListener( 'resize', onWindowResize, false );

      }

      function transform( targets, duration ) {

        TWEEN.removeAll();

        for ( var i = 0; i < objects.length; i ++ ) {

          var object = objects[ i ];
          var target = targets[ i ];

          new TWEEN.Tween( object.position )
            .to( { x: target.position.x, y: target.position.y, z: target.position.z }, Math.random() * duration + duration )
            .easing( TWEEN.Easing.Exponential.InOut )
            .start();

          new TWEEN.Tween( object.rotation )
            .to( { x: target.rotation.x, y: target.rotation.y, z: target.rotation.z }, Math.random() * duration + duration )
            .easing( TWEEN.Easing.Exponential.InOut )
            .start();

        }

        new TWEEN.Tween( this )
          .to( {}, duration * 2 )
          .onUpdate( render )
          .start();

      }

      function onWindowResize() {

        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();

        renderer.setSize( window.innerWidth, window.innerHeight );

      }

      function animate() {

        requestAnimationFrame( animate );

        TWEEN.update();
        controls.update();

      }

      function render() {

        renderer.render( scene, camera );

      }

    </script>
  </body>
</html>
